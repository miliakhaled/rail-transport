{"version":3,"sources":["layouts/sidebar/Profile.jsx","config.ts","layouts/sidebar/sidebar.tsx","lib/inputs/BooleanInput.tsx","lib/inputs/DateInput.tsx","lib/inputs/DateRange.tsx","lib/inputs/GraphQLSelect.tsx","lib/inputs/StaticSelect.tsx","lib/inputs/TextInput.tsx","lib/inputs/InputFactory.tsx","lib/form/utils.ts","lib/utils/Info.tsx","lib/form/FormList.tsx","lib/form/RLForm.tsx","lib/form/GraphQLForm.tsx","lib/table/RLTable.tsx","lib/table/Export.tsx","lib/table/GraphQLTable.tsx","lib/table/utils.ts","lib/views/ViewToolbar.tsx","lib/views/GraphQLTableView.tsx","apps/clients/graphql/queries.ts","lib/utils/graphql-helpers.ts","apps/clients/contact/info.tsx","apps/clients/info.tsx","apps/clients/contact/graphql/queries.ts","apps/park/info.tsx","apps/park/graphql/queries.ts","routes.tsx","apps/clients/list.tsx","apps/clients/create.tsx","apps/clients/contact/list.tsx","apps/clients/contact/create.tsx","apps/park/list.tsx","apps/park/create.tsx","layouts/content/index.tsx","graphql.ts","links.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","data","useQuery","gql","style","width","height","display","justifyContent","flexDirection","bordered","backgroundColor","textAlign","size","src","window","location","hostname","_","get","type","color","level","browserHistory","createBrowserHistory","serverBaseURL","serverUrl","Sidebar","links","useState","collapse","setCollapse","Sider","className","collapsible","theme","paddingTop","overflow","collapsed","onCollapse","e","mode","defaultSelectedKeys","pathname","defaultOpenKeys","filter","l","pages","findIndex","p","href","map","title","link","index","Item","key","icon","to","SubMenu","index2","BooleanInput","fieldDef","onChange","label","defaultChecked","properties","name","required","rules","labelCol","span","valuePropName","message","target","checked","DateInput","values","picker","format","defaultDate","placeholder","undefined","allowClear","DateRange","begin","end","RangePicker","locale","Option","Select","OptGroup","SelectControl","save","responseTitle","defaultValue","query","variables","filters","show","identifier","get_items","divider","editable","reduce","acc","cur","loading","items","onValueChange","groupedOptions","groupBy","options","Object","keys","disabled","item","value","i","res","fields","curr","action","showSearch","optionFilterProp","o","c","StaticSelect","choices","TextInput","info","help","InputsFactory","extractNestedFieldKeys","initialValues","forEach","f","sub","field","push","extractForeignKey","multiple_fields","Info","content","Text","placement","InfoCircleOutlined","fontSize","marginLeft","AntFormFields","unique","form","setValues","gutter","align","xs","md","Math","floor","length","alignSelf","FormList","inputs","List","add","remove","justify","alignItems","shape","onClick","PlusOutlined","description","DeleteOutlined","danger","Modal","setAppElement","RLForm","onFinishUpdate","onFinish","card","useForm","internalForm","useEffect","setFieldsValue","marginBottom","wrapperCol","GraphQLForm","resultName","mutation","history","buildInput","redirect","updateForm","checkResponse","d","useMutation","doMutation","newInput","input","then","success","error","console","log","catch","handleOnFinish","sm","xl","resetFields","htmlType","submit","require","RLTable","onDelete","onSelect","onUpdate","actions","columns","updateColumn","deleteColumn","isUpdatable","isDeletable","updateLink","pagination","refetch","fetchMoreData","count","updateInputs","selected","setSelected","visible","setVisible","allColumns","onPageChange","onRowPerPageChange","page","rowPerPage","render","id","confirm","okText","cancelText","onOk","overlay","a","destroyOnClose","onCancel","validateFields","isFieldsTouched","scroll","x","rowKey","dataSource","slice","Group","v","Export","onClose","filename","url","appName","modelName","setChecked","setItems","selection","setSelection","file","setFilename","method","hidden","JSON","stringify","toString","footer","TableContext","React","createContext","GraphQLTable","Provider","Consumer","deleteItem","updateItem","graphql","resultTitle","initVariables","createLink","expand","nested","exportUrl","expprtFileName","rows","setRowPerPage","setPage","usePagination","all","limit","offset","fetchPolicy","fetchMore","delete","update","exports","setExport","dataIndex","lg","borderWidth","padding","rowpage","response","results","updateQuery","prev","fetchMoreResult","assign","ViewToolbar","onVariablesChange","GraphQLTableView","deleteMutation","setVariables","FETCH_CLIENTS","operation","queryBuilder","errors","createMutation","createNestedMutation","simple_query","contactColumns","b","alert","contactInput","contactFilters","inputContactWithClient","clientColumns","clientInput","clientFilters","inputClientWithContactCreate","ALL_CONTACTS","parkColumns","m","designation","y","parkInputs","engine_type","parkUpdate","parkFilters","ALL_ENGINES","routes","component","path","year","Content","minHeight","r","exact","errorLink","onError","graphQLErrors","networkError","locations","nodes","result","statusCode","authLink","setContext","headers","token","localStorage","getItem","authorization","ApolloLink","forward","replace","BatchHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","addTypename","from","TitleContext","App","setValue","drawer","setDrawer","margin","closable","Header","paddingRight","paddingLeft","lineHeight","Boolean","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d038297e.chunk.js","sourcesContent":["import React from 'react'\nimport { Avatar, Card, Typography } from 'antd'\nimport Title from 'antd/lib/typography/Title'\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport _ from 'lodash'\n\nexport default function Profile() {\n    const { data } = useQuery(gql`\n    query getMe{\n      me {\n        first_name,\n        last_name,\n    profile {\n      photo\n      job\n    }\n  }\n    }\n  `)\n   \n  \n    return (\n        <div style={{width:\"100%\",height:200,display:\"flex\",justifyContent:\"center\",flexDirection:\"row\"}}>\n        <Card bordered={false}  style={{backgroundColor:\"transparent\",textAlign:\"center\"}}>\n            <Avatar  size=\"large\"  src={`http://${window.location.hostname}:8000/${_.get(data, 'me.profile.photo', '')}`} />\n            <br/>\n            <Typography  type=\"danger\" style={{color:\"white\",textAlign:\"center\"}} level={4} >{_.get(data, 'me.first_name', '')} {_.get(data, 'me.last_name', '')}</Typography>\n        </Card>\n      </div>\n    )\n}\n","import { createBrowserHistory } from \"history\";\n\nconst isBuild: boolean = true;\nexport const browserHistory = createBrowserHistory();\nexport const serverPort = isBuild ? 80 : 8000;\nexport const serverBaseURL = `http${isBuild ? \"\" : \"\"}://${\n  window.location.hostname\n}:${serverPort}`;\n\nexport const appTitle: string = \"Rail Transport\";\nexport const serverUrl: string = `http${isBuild ? \"s\" : \"\"}://${\n  window.location.hostname\n}${isBuild ? \"\" : `:${serverPort}`}/gql`;\n","import React, { useState } from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { LinkType } from \"../../links\";\nimport { Link } from \"react-router-dom\";\nimport Profile from \"./Profile\";\nimport _ from \"lodash\";\nimport { browserHistory } from \"../../config\";\n\ninterface SidebarProps {\n  color?: \"dark\" | \"light\" | undefined;\n  links: LinkType[];\n}\n\nexport default function Sidebar({ color = \"dark\", links }: SidebarProps) {\n  const [collapse, setCollapse] = useState(false);\n  return (\n    <Layout.Sider\n      className=\"sidebar\"\n      collapsible\n      // breakpoint=\"xl\"\n      width=\"250\"\n      theme=\"dark\"\n      style={{ paddingTop: 64, height: \"100%\", overflow: \"auto\" }}\n      collapsed={collapse}\n      onCollapse={(e) => setCollapse(!collapse)}\n    >\n      <Profile />\n      <Menu\n        theme={color}\n        mode=\"inline\"\n        defaultSelectedKeys={[browserHistory.location.pathname]}\n        defaultOpenKeys={links\n          .filter((l) =>\n            l.type === \"multiple\"\n              ? l.pages.findIndex(\n                  (p) => p.href === browserHistory.location.pathname\n                ) !== -1\n              : false\n          )\n          .map((p) => p.title)}\n      >\n        {links.map((link, index) => {\n          if (link.type === \"signle\") {\n            return (\n              <Menu.Item key={link.href} className=\"customclass\">\n                <>\n                  {link.icon}\n                  <span> {link.title}</span>\n                  <Link to={link.href} />\n                </>\n              </Menu.Item>\n            );\n          } else {\n            return (\n              <Menu.SubMenu\n                key={link.title}\n                title={\n                  <span>\n                    {link.icon}\n                    {/* <Icon type={link.icon} /> */}\n                    <span>{link.title}</span>\n                  </span>\n                }\n              >\n                {link.pages.map((p, index2) => (\n                  <Menu.Item key={p.href}>\n                    <strong> {p.title}</strong>\n                    <Link to={p.href} />\n                  </Menu.Item>\n                ))}\n              </Menu.SubMenu>\n            );\n          }\n        })}\n      </Menu>\n    </Layout.Sider>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { Checkbox, Form } from \"antd\";\nimport { InputsType } from \"./types\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport { SwitchType } from \"../types/FilterTypes\";\n\nexport default function BooleanInput({\n  fieldDef,\n  onChange,\n  label = true,\n}: InputsType<SwitchType>): ReactElement {\n  const { defaultChecked } = fieldDef.properties as SwitchType;\n\n  const { title, name, required, rules = [] } = fieldDef;\n  return (\n    <Form.Item\n      label={label ? title : \"\"}\n      labelCol={{ span: 24 }}\n      name={name}\n      valuePropName=\"checked\"\n      rules={[\n        {\n          required: required,\n          message: `${title} est obligatoire !`,\n        },\n        ...rules,\n      ]}\n      style={{ width: \"100%\" }}\n    >\n      <Checkbox\n        defaultChecked={defaultChecked}\n        onChange={(e: CheckboxChangeEvent) =>\n          onChange({ [name]: e.target.checked })\n        }\n        style={{ width: \"100%\" }}\n      >\n        {title}\n      </Checkbox>\n    </Form.Item>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { Form, DatePicker } from \"antd\";\nimport { InputsType } from \"./types\";\nimport { DateType } from \"../types/FilterTypes\";\n\nexport default function DateInput({\n  fieldDef,\n  values,\n  onChange,\n  label = true,\n}: InputsType<DateType>): ReactElement {\n  const { picker, defaultDate, format } = fieldDef.properties as DateType;\n  const { title, name, required, rules = [], size = \"large\" } = fieldDef;\n\n  return (\n    <Form.Item\n      label={label ? title : \"\"}\n      labelCol={{ span: 24 }}\n      name={name}\n      rules={[\n        {\n          type: \"object\",\n\n          required: required,\n          message: `${title} est obligatoire !`,\n        },\n        ...rules,\n      ]}\n      style={{ width: \"100%\" }}\n    >\n      <DatePicker\n        placeholder={title}\n        format={format || undefined}\n        picker={picker}\n        allowClear\n        onChange={(e) => {\n          onChange({ [name]: e });\n        }}\n        size={size}\n        style={{ width: \"100%\" }}\n      ></DatePicker>\n    </Form.Item>\n  );\n}\n","import React from \"react\";\nimport { Form, DatePicker, message } from \"antd\";\nimport locale from \"antd/es/date-picker/locale/fr_FR\";\nimport { InputsType } from \"./types\";\nimport { DateRangeType } from \"../types/FilterTypes\";\n\nexport default function DateRange({\n  fieldDef,\n  onChange,\n  label = true,\n}: InputsType<DateRangeType>) {\n  const { begin, end, picker } = fieldDef.properties as DateRangeType;\n  const { name, title, required, size = \"large\" } = fieldDef;\n  return (\n    <Form.Item\n      label={label ? title : \"\"}\n      style={{ width: \"100%\" }}\n      name={name}\n      rules={[\n        {\n          required: required,\n          message: `${title} est obligatoire !`,\n        },\n      ]}\n    >\n      <DatePicker.RangePicker\n        size={size}\n        // picker={picker}\n        // size={size}\n        // picker={picker}\n        style={{ width: \"100%\" }}\n        // style={{ width: \"100%\" }}\n        locale={locale}\n        onChange={(values) => {\n          if (values) {\n            onChange({\n              [name[0]]: values && values[0] && values[0].format(\"YYYY-MM-DD\"),\n              [name[1]]: values && values[1] && values[1].format(\"YYYY-MM-DD\"),\n            });\n          } else {\n            onChange({ [name[0]]: null, [name[1]]: null });\n          }\n        }}\n      ></DatePicker.RangePicker>\n    </Form.Item>\n  );\n}\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { Select, Form } from \"antd\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { InputsType } from \"./types\";\nimport { SelectType } from \"../types/FilterTypes\";\nconst { Option, OptGroup } = Select;\n\nexport default function SelectControl({\n  fieldDef,\n  onChange,\n  values,\n  save,\n  label = true,\n}: InputsType<SelectType>) {\n  const {\n    responseTitle = \"response\",\n    defaultValue,\n    query,\n    variables,\n\n    mode,\n    filters = [],\n    show = \"designation\",\n    identifier = \"id\",\n    get_items,\n    divider,\n  } = fieldDef.properties as SelectType;\n  const {\n    size = \"large\",\n    name,\n    title,\n    required,\n    rules = [],\n    editable = true,\n  } = fieldDef;\n\n  const { data, loading } = useQuery(query, {\n    variables: {\n      ...variables,\n      ...filters.reduce(\n        (acc, cur) => ({ ...acc, [cur]: values ? values[cur] : \"\" }),\n        {}\n      ),\n    },\n  });\n  const items = get_items\n    ? _.get(data, `${responseTitle}.${get_items}`, [])\n    : _.get(data, responseTitle, []);\n\n  const onValueChange = (e: any) => {\n    onChange({ [name]: e });\n  };\n  const groupedOptions = divider ? _.groupBy(items, divider) : null;\n  const options = groupedOptions ? Object.keys(groupedOptions) : null;\n\n  return (\n    <Form.Item\n      label={label ? title : \"\"}\n      labelCol={{ span: 24 }}\n      name={name}\n      rules={[\n        {\n          required: required,\n          message: `${title} est obligatoire !`,\n        },\n        ...rules,\n      ]}\n      style={{ width: \"100%\" }}\n    >\n      <Select\n        disabled={!editable}\n        // key={key}\n        size={size}\n        onChange={\n          save\n            ? (e, item) => {\n                const value =\n                  items[items.findIndex((i: any) => i[identifier] === e)];\n                const res = save.fields.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr]: _.get(value, curr, \"\"),\n                  }),\n                  {}\n                );\n                save.action(res);\n                onValueChange(e);\n              }\n            : onValueChange\n        }\n        mode={mode}\n        placeholder={title}\n        loading={loading}\n        allowClear\n        defaultValue={defaultValue}\n        showSearch\n        optionFilterProp=\"children\"\n      >\n        {/* {additional.map(c => (\n                    <option value={c[identifier]}>{c[column]}</option>\n                ))} */}\n\n        {divider && groupedOptions && options\n          ? options?.map((o) => (\n              <OptGroup label={o}>\n                {groupedOptions[o].map((c: any) => (\n                  <Option key={c[identifier]} value={c[identifier]}>\n                    {c[show]}\n                  </Option>\n                ))}\n              </OptGroup>\n            ))\n          : items.map((c: any) => (\n              <Option key={c[identifier]} value={c[identifier]}>\n                {c[show]}\n              </Option>\n            ))}\n      </Select>\n    </Form.Item>\n  );\n}\n","import React from \"react\";\nimport { Form, Select } from \"antd\";\nimport _ from \"lodash\";\nimport { StaticSelectType } from \"../types/FilterTypes\";\nimport { InputsType } from \"./types\";\nexport default function StaticSelect({\n  fieldDef,\n  values,\n  onChange,\n  save,\n  label = true,\n}: InputsType<StaticSelectType>) {\n  const {\n    defaultValue,\n    mode,\n    choices,\n  } = fieldDef.properties as StaticSelectType;\n\n  const { size = \"large\", name, title, required, rules = [] } = fieldDef;\n  const onValueChange = (e: any) => {\n    onChange({ [name]: e });\n  };\n  return (\n    <Form.Item\n      rules={[\n        {\n          required: required,\n          message: `${title} est obligatoire !`,\n        },\n        ...rules,\n      ]}\n      name={name}\n      label={label ? title : \"\"}\n      style={{ width: \"100%\" }}\n    >\n      <Select\n        onChange={\n          save\n            ? (e, item) => {\n                // const value = choices[choices.findIndex((i:any) => i[\"id\"] === e)];\n                // const res = save.fields.reduce(\n                //   (acc, curr) => ({\n                //     ...acc,\n                //     [curr]: _.get(value, curr, \"\"),\n                //   }),\n                //   {}\n                // );\n                save.action({ [name]: e });\n                onValueChange(e);\n              }\n            : onValueChange\n        }\n        mode={mode}\n        allowClear\n        size={size}\n        placeholder={title}\n        defaultValue={defaultValue}\n      >\n        {choices.map((c) => (\n          <Select.Option value={c.value}>{c.title}</Select.Option>\n        ))}\n      </Select>\n    </Form.Item>\n  );\n}\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\nimport { InputsType } from \"./types\";\nimport { InputType } from \"../types/FilterTypes\";\n\nexport default function TextInput({\n  fieldDef,\n  onChange,\n  values,\n  label = true,\n}: InputsType<InputType>) {\n  const { defaultValue, type = \"text\" } = fieldDef.properties as InputType;\n  const { name, title, required, size = \"large\", info } = fieldDef;\n\n  return (\n    <Form.Item\n      name={name}\n      label={label ? title : \"\"}\n      help={info}\n      rules={[\n        {\n          required: required,\n          message: `${title} est obligatoire !`,\n        },\n      ]}\n    >\n      <Input\n        defaultValue={defaultValue}\n        onChange={(e) => onChange({ [name]: e.target.value })}\n        type={type || \"text\"}\n        size={size}\n        placeholder={title}\n        name={name}\n      />\n    </Form.Item>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport {\n  GraphQLSelect,\n  StaticSelect,\n  DateInput,\n  BooleanInput,\n  DateRange,\n  TextInput,\n} from \".\";\nimport { InputsType } from \"./types\";\nimport { InputUnionType } from \"../types/FilterTypes\";\n\nexport default function InputsFactory({\n  fieldDef,\n  onChange = (e) => {},\n  label = false,\n  save,\n  values,\n}: InputsType<InputUnionType>): ReactElement {\n  switch (fieldDef.properties.type) {\n    case \"select\":\n      return (\n        <GraphQLSelect\n          fieldDef={fieldDef as any}\n          onChange={onChange}\n          label={label}\n        />\n      );\n    case \"static\":\n      return (\n        <StaticSelect\n          fieldDef={fieldDef as any}\n          onChange={onChange}\n          label={label}\n        />\n      );\n    case \"date\":\n      return (\n        <DateInput\n          fieldDef={fieldDef as any}\n          onChange={onChange}\n          label={label}\n        />\n      );\n    case \"boolean\":\n      return (\n        <BooleanInput\n          fieldDef={fieldDef as any}\n          onChange={onChange}\n          label={label}\n        />\n      );\n    case \"date_range\":\n      return (\n        <DateRange\n          fieldDef={fieldDef as any}\n          onChange={onChange}\n          label={label}\n        />\n      );\n    default:\n      return (\n        <TextInput\n          fieldDef={fieldDef as any}\n          onChange={onChange}\n          label={label}\n        />\n      );\n  }\n}\n","import _ from \"lodash\";\nimport {\n  SelectType,\n  MultipleType,\n  InputFieldType,\n  InputUnionType,\n} from \"../types/FilterTypes\";\n/**\n * Extract the foreignkey from a nested foreign object ex:\n * ```js\n * {nom:\"milia\",client:{id:1,raison_social:\"mobilis\"}} => {nom:\"milia\", client:1}\n * ```\n * @param {array} fields represent fields that contain information about input, we target the query field if exists\n * @param {array} values the array contains the values\n *\n */\n/**\n * this function extract the foreign keys from foreign array ex: prestations in bareme\n * and return the same list, with foreign key ID instead of an object\n * @param {array} fields list of fields of nested input\n * @param {array} values list of values of the prefetched object\n * @returns same array with foreign keys extracted\n */\nconst extractNestedFieldKeys = (fields: any, initialValues = []) => {\n  let res: any = [];\n\n  initialValues.forEach((f) => {\n    //console.log(f);\n\n    const sub = fields.reduce((acc: any, cur: any) => {\n      return {\n        ...acc,\n        [cur.field]: _.get(f, cur.properties.get, f[cur.name]),\n      };\n    }, {});\n    res.push(sub);\n  });\n  return res;\n};\n\n/**\n * replace foreign objects with the ID\n * @param {array} fields input fields\n * @param {array} values object values\n */\nexport const extractForeignKey = (\n  fields: InputFieldType<InputUnionType>[] = [],\n  values: any\n) => {\n  let res = {};\n  const multiple_fields = fields.filter(\n    (f) => f.properties.type === \"multiple\"\n  );\n\n  //const multiple_values = values[multiple_fields.field];\n\n  res = {\n    ...res,\n    ...fields\n      .filter((f) => !(f.properties.type === \"multiple\"))\n      .reduce(\n        (acc, cur) => ({\n          ...acc,\n          [cur.name]:\n            (cur.properties as SelectType).mode === \"multiple\"\n              ? _.get(values, cur.name, []).map((f: any) => _.get(f, \"id\", []))\n              : _.get(\n                  values,\n                  (cur.properties as SelectType).get + \"\",\n                  values[cur.name]\n                ),\n        }),\n        {}\n      ),\n  };\n\n  multiple_fields.forEach((f) => {\n    res = {\n      ...res,\n      [f.name]: [\n        ...extractNestedFieldKeys(\n          (f.properties as MultipleType).fields,\n          values[f.name]\n        ),\n      ],\n    };\n  });\n\n  return res;\n};\n","import React, { ReactElement } from \"react\";\nimport { Popover, Typography } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\ninterface Props {\n  info: string;\n}\n\nexport default function Info({ info = \"dsdsd\" }: Props): ReactElement {\n  return (\n    <div>\n      <Popover\n        content={\n          <div style={{ width: 200 }}>\n            <Typography.Text>{info}</Typography.Text>\n          </div>\n        }\n        placement=\"right\"\n      >\n        <InfoCircleOutlined\n          style={{ fontSize: 12, color: \"#888888\", marginLeft: 8 }}\n        />\n      </Popover>\n    </div>\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport { FormInputType } from \"./types\";\nimport { Form, Input, Button, Row, Col, Empty, Divider, Card } from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport Title from \"antd/lib/typography/Title\";\nimport { InputFactory } from \"../inputs\";\nimport {\n  MultipleType,\n  InputFieldType,\n  InputUnionType,\n} from \"../types/FilterTypes\";\nimport { FormInstance } from \"antd/lib/form\";\nimport Info from \"../utils/Info\";\n\ninterface AntFormFieldsProps {\n  fields: InputFieldType<InputUnionType>[];\n  index: number;\n  unique?: string[];\n  form?: FormInstance;\n}\nexport function AntFormFields({\n  fields,\n  index,\n  unique,\n  form,\n}: AntFormFieldsProps): ReactElement {\n  const [values, setValues] = useState({});\n  const onChange = (value: object) => {\n    setValues({ ...values, ...value });\n  };\n\n  return (\n    <Row gutter={16} align=\"middle\">\n      {fields.map((i, index2) => (\n        <Col\n          xs={24}\n          md={Math.floor(24 / fields.length)}\n          style={{ alignSelf: \"center\" }}\n        >\n          <InputFactory\n            fieldDef={{\n              ...i,\n              name: index !== undefined ? [index, i.name] : i.name,\n            }}\n            onChange={onChange}\n            label={false}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\ninterface Props {\n  inputs: Omit<InputFieldType<InputUnionType>, \"required\" | \"rules\" | \"size\">;\n}\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 },\n};\nexport default function FormList({ inputs }: Props): ReactElement {\n  return (\n    <Form.List name={inputs.name}>\n      {(fields, { add, remove }) => {\n        return (\n          <Card\n            title={\n              <Row justify=\"space-between\">\n                <Col style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <div style={{ display: \"flex\" }}>\n                    {inputs.title} {inputs.info && <Info info={inputs.info} />}\n                  </div>\n                </Col>\n                <Col style={{ display: \"flex\", alignItems: \"center\" }}>\n                  <Button\n                    type=\"primary\"\n                    shape=\"circle\"\n                    onClick={() => {\n                      add();\n                    }}\n                  >\n                    <PlusOutlined />\n                  </Button>\n                </Col>\n              </Row>\n            }\n          >\n            {fields.length === 0 ? (\n              <Empty description=\"aucun élément n'a encore été ajouté!\"></Empty>\n            ) : null}\n            {fields.map((field, index) => (\n              <Row\n                gutter={[16, 2]}\n                style={{ display: \"flex\", alignItems: \"start\" }}\n              >\n                <Col span={23}>\n                  <Form.Item key={field.key}>\n                    <AntFormFields\n                      //form={form}\n                      //unique={unique}\n                      fields={(inputs.properties as MultipleType).fields}\n                      index={index}\n                    />\n                  </Form.Item>\n                </Col>\n\n                {fields.length > 0 ? (\n                  <Col span={1}>\n                    <Button\n                      size=\"small\"\n                      className=\"dynamic-delete-button\"\n                      icon={<DeleteOutlined />}\n                      danger\n                      onClick={() => {\n                        remove(field.name);\n                      }}\n                    />\n                  </Col>\n                ) : null}\n              </Row>\n            ))}\n          </Card>\n          //   <Legend\n          //     legend={legend}\n          //     title={inputs.title}\n          //     info={inputs.info}\n          //     action={\n          //       <Button\n          //         type=\"primary\"\n          //         size=\"middle\"\n          //         onClick={() => {\n          //           add();\n          //         }}\n          //       >\n          //         <Add />\n          //       </Button>\n          //     }\n          //   >\n          //     <br />\n          //     <br />\n\n          //   </Legend>\n        );\n      }}\n    </Form.List>\n  );\n}\n","import React, { ReactElement, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form, Row, Col, Divider, Card, Button } from \"antd\";\nimport { InputFactory } from \"../inputs\";\nimport { useForm, FormInstance } from \"antd/lib/form/util\";\nimport { Store } from \"antd/lib/form/interface\";\nimport { FormInputType } from \"./types\";\nimport { extractForeignKey } from \"./utils\";\nimport FormList from \"./FormList\";\nimport Info from \"../utils/Info\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\ninterface RLFormProps {\n  title: string;\n  inputs: FormInputType;\n  redirect?: string;\n  initialValues?: object;\n  onFinishUpdate?: ((values: Store) => void) | undefined;\n  buildInput?: () => any;\n  history?: RouteComponentProps[\"history\"];\n  span?: number;\n  form?: FormInstance;\n  mode?: \"update\" | \"create\";\n  onFinish: ((values: Store) => void) | undefined;\n  label?: boolean;\n  card?: boolean;\n}\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\nexport default function RLForm({\n  inputs,\n  onFinishUpdate,\n  title,\n  initialValues,\n  span = 12,\n  form,\n  onFinish,\n  label = false,\n  card = true,\n}: RLFormProps): ReactElement {\n  const [internalForm] = useForm();\n  const [values, setValues] = useState({});\n  const onChange = (value: any) => {\n    setValues({ ...values, ...value });\n  };\n  useEffect(() => {\n    form?.setFieldsValue(extractForeignKey(inputs.fields, initialValues));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialValues]);\n  return (\n    <div>\n      <Card\n        title={\n          card ? (\n            <div style={{ display: \"flex\" }}>\n              {inputs.title} {inputs.info && <Info info={inputs.info} />}\n            </div>\n          ) : null\n        }\n        style={{ marginBottom: 16 }}\n      >\n        <Form\n          initialValues={\n            initialValues ? extractForeignKey(inputs.fields, initialValues) : {}\n          }\n          {...{\n            labelCol: { span: 24 },\n            wrapperCol: { span: 24 },\n          }}\n          form={form || internalForm}\n          name=\"form\"\n          onFinish={onFinish}\n        >\n          <div className=\"form\">\n            <div\n              title={inputs.title}\n              //   info={inputs.info}\n            >\n              <Row gutter={[20, 0]}>\n                {inputs.fields.map((i) =>\n                  i.properties.type === \"multiple\" ? (\n                    <Col span={24}>\n                      {/* <Col span={24}>\n                        <Divider />\n                      </Col> */}\n                      <FormList\n                        // unique={i.unique}\n                        // legend={legend}\n                        inputs={i}\n                        //name={i.graphql || i.field}\n                      />\n                    </Col>\n                  ) : (\n                    <Col md={span} xs={24}>\n                      <InputFactory\n                        fieldDef={i}\n                        label={label}\n                        onChange={onChange}\n                        values={values}\n                      />\n                    </Col>\n                  )\n                )}\n              </Row>\n            </div>\n          </div>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport { FormInputType } from \"./types\";\nimport { Store } from \"antd/lib/form/interface\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { FormInstance } from \"antd/lib/form\";\nimport RLForm from \"./RLForm\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { DocumentNode } from \"graphql\";\nimport { useForm } from \"antd/lib/form/util\";\nimport { Row, Col, Button, message } from \"antd\";\nimport _ from \"lodash\";\ninterface Props {\n  title?: string;\n  inputs: FormInputType;\n  mutation: DocumentNode;\n  redirect?: string;\n  initialValues?: object;\n  onFinishUpdate?: ((values: Store) => void) | undefined;\n  buildInput?: (e: Store) => any;\n  history?: RouteComponentProps[\"history\"];\n  span?: number;\n  updateForm?: FormInstance;\n  mode?: \"update\" | \"create\";\n  onFinish?: ((values: Store) => void) | undefined;\n  label?: boolean;\n  resultName?: string;\n  checkResponse?: (response: object) => boolean;\n}\n\nexport default function GraphQLForm({\n  resultName = \"response\",\n  history,\n  mutation,\n  buildInput = (e) => e,\n  inputs,\n  onFinishUpdate,\n  redirect = \"\",\n  title,\n  initialValues = {},\n  span = 12,\n  updateForm,\n  onFinish,\n  label = false,\n  checkResponse = (d) => _.get(d, `data.${resultName}.ok`, false),\n}: Props): ReactElement {\n  const [doMutation] = useMutation(mutation);\n  const [form] = useForm();\n  const [clear, setClear] = useState(false);\n  const handleOnFinish = (values: Store) => {\n    const newInput = buildInput(values);\n\n    doMutation({ variables: { input: newInput } })\n      .then((d) => {\n        if (checkResponse && checkResponse(d)) {\n          // if (!clear) history && history.push(redirect);\n          // else {\n          //form.resetFields();\n          // }\n          message.success(\"Élément créé avec succès\");\n        }\n        // if (_.get(d, `data.${resultName}.ok`, false)) {\n\n        // }\n        else {\n          if (_.get(d, `data.${resultName}.errors`, false))\n            message.error(\n              `Une erreur est survenue dans les champs suivant : ${_.get(\n                d,\n                `data.${resultName}.errors`,\n                []\n              ).reduce((acc: any, curr: any) => `${acc}  ${curr.field}`, \"\")}`\n            );\n          console.log(_.get(d, `data.${resultName}.errors`));\n        }\n      })\n      .catch((e) => {\n        message.error(`Une erreur est survenue`);\n        console.log(e);\n      });\n  };\n  return (\n    <div>\n      <RLForm\n        title=\"Create Person\"\n        form={form}\n        //action={() => console.log(\"dz\")}\n        mode=\"create\"\n        span={span}\n        label={label}\n        inputs={inputs}\n        onFinish={(e) => handleOnFinish(e)}\n        initialValues={initialValues}\n      />\n      <Row gutter={[16, 10]} justify=\"end\">\n        <Col md={6} sm={12} xs={24} xl={4}>\n          <Button\n            onClick={() => {\n              form.resetFields();\n              //setClear(true);\n              //form.submit();\n            }}\n            htmlType=\"button\"\n            style={{ width: \"100%\" }}\n            type=\"default\"\n          >\n            supprimer\n          </Button>\n        </Col>\n        <Col md={6} sm={12} xs={24} xl={4}>\n          <Button\n            onClick={() => {\n              // setClear(false);\n              form.submit();\n            }}\n            style={{ width: \"100%\" }}\n            type=\"primary\"\n          >\n            engregistrer\n          </Button>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport Table, { ColumnsType } from \"antd/lib/table\";\nimport { OperationVariables, ApolloQueryResult } from \"apollo-boost\";\nimport { ExecutionResult } from \"graphql\";\nimport { Button, Dropdown, Menu, Modal, Select, Drawer } from \"antd\";\nimport {\n  EditFilled as Edit,\n  DeleteOutlined as Delete,\n  MoreOutlined as More,\n} from \"@ant-design/icons\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { PaginationType } from \"./utils\";\nimport confirm from \"antd/lib/modal/confirm\";\nimport { ObservableQueryFields } from \"@apollo/react-common/lib/types/types\";\nimport _ from \"lodash\";\nimport { RLForm } from \"../form\";\nimport { FormInputType } from \"../form/types\";\nimport { Store } from \"antd/lib/form/interface\";\nimport { useForm } from \"antd/lib/form/util\";\nimport { extractForeignKey } from \"../form/utils\";\nimport UpdateModal from \"./UpdateModal\";\nimport useModal from \"antd/lib/modal/useModal\";\n\nexport type ActionsType = {\n  title: string;\n  icon?: any;\n  onClick: (item: any) => void;\n};\ninterface Props {\n  onDelete?: (id: string | number) => void;\n  onUpdate?: (values: Store) => void;\n  data: object[];\n  columns: ColumnsType<object>;\n  actions?: ActionsType[];\n  loading?: boolean;\n  updateColumn?: boolean;\n  deleteColumn?: boolean;\n  isUpdatable?: (e: any) => boolean;\n  isDeletable?: (e: any) => boolean;\n  updateLink?: string;\n  history?: RouteComponentProps[\"history\"];\n  refetch?: () => Promise<ApolloQueryResult<any>> | void;\n  pagination: PaginationType;\n  fetchMore?: (v: any) => void;\n  title?: string;\n  fetchMoreData?: (rowpage: number, page: number) => void;\n  count: number;\n  updateInputs?: FormInputType;\n  onSelect?: React.Dispatch<React.SetStateAction<any>>;\n}\n\n/**\n *\n * Table to render data with delete and update features\n */\n\nvar Dialog = require(\"rc-dialog\");\n\nexport default function RLTable({\n  data = [],\n  onDelete,\n  onSelect,\n  onUpdate,\n  history,\n  loading,\n  actions = [],\n  columns,\n  updateColumn = true,\n  deleteColumn = true,\n  isUpdatable = () => true,\n  isDeletable = () => true,\n  updateLink,\n  refetch = () => {},\n  pagination,\n  fetchMoreData,\n  title,\n  count,\n  updateInputs,\n}: Props): ReactElement {\n  const [selected, setSelected] = useState<any>({});\n  const [visible, setVisible] = useState(false);\n  const [updateForm] = useForm();\n  const allColumns: ColumnsType<object> = [...columns];\n  const { onPageChange, onRowPerPageChange, page, rowPerPage } = pagination;\n  const showDeleteConfirm = (item: { id: string }) => {\n    confirm({\n      title: \"Voulez-vous supprimer cet objet?\",\n      content: _.get(item, \"designation\", \"\"),\n      okText: \"supprimer\",\n\n      cancelText: \"annuler\",\n      onOk() {\n        onDelete && onDelete(item.id);\n        //if (graphql.delete)\n        // onDelete &&\n        //   onDelete({ variables: { id: item.id } })\n        //     .then((d: any) => {\n        //       refetch();\n        //       onPageChange(0);\n        //     })\n        //     .catch((e) => {\n        //       console.log(e);\n        //       alert(\"operation echouée\");\n        //     });\n        //else alert(\"cette fonctionalité est desactiver par le devloppeur\");\n      },\n    });\n  };\n  if (updateColumn)\n    allColumns.push({\n      title: \"modifier\",\n      render: (e) =>\n        isUpdatable(e) ? (\n          <Button\n            icon={<Edit />}\n            onClick={() => {\n              //\n              if (updateLink) history && history.push(updateLink + `/${e.id}`);\n              else {\n                setSelected(e);\n                onSelect && onSelect(e);\n                setVisible(true);\n                const values = { ...e };\n                delete values.id;\n              }\n            }}\n          />\n        ) : null,\n      width: 80,\n      align: \"center\",\n    });\n  if (deleteColumn)\n    allColumns.push({\n      title: \"supprimer\",\n      render: (e: any) => {\n        return isDeletable(e) ? (\n          <Button\n            icon={<Delete />}\n            danger\n            onClick={() => {\n              showDeleteConfirm(e);\n            }}\n          />\n        ) : null;\n      },\n      width: 80,\n      align: \"center\",\n    });\n  if (actions.length > 0)\n    allColumns.push({\n      title: \"actions\",\n      render: (i) => (\n        <Dropdown\n          overlay={\n            <Menu theme=\"dark\">\n              {actions.map((a) => (\n                <Menu.Item\n                  style={{\n                    alignItems: \"center\",\n                    color: \"white\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    width: 130,\n                  }}\n                  key=\"1\"\n                  onClick={() => a.onClick(i)}\n                >\n                  {a.title}\n                  <a.icon></a.icon>\n                </Menu.Item>\n              ))}\n            </Menu>\n          }\n        >\n          <Button size=\"small\" type=\"ghost\" icon={<More />}></Button>\n        </Dropdown>\n      ),\n      width: 40,\n      align: \"center\",\n    });\n\n  return (\n    <div>\n      {updateInputs ? (\n        <Modal\n          key={selected}\n          destroyOnClose\n          visible={visible}\n          onCancel={() => {\n            setVisible(false);\n            setSelected({});\n          }}\n          title={updateInputs.title}\n          onOk={() => {\n            updateForm.validateFields().then((values) => {\n              if (updateForm.isFieldsTouched()) {\n                onUpdate && onUpdate(values);\n                onPageChange(0);\n              }\n              setVisible(false);\n            });\n          }}\n        >\n          <RLForm\n            initialValues={selected}\n            form={updateForm}\n            card={false}\n            inputs={updateInputs}\n            title=\"\"\n            onFinish={(e) => {\n              console.log();\n            }}\n          ></RLForm>\n        </Modal>\n      ) : // <UpdateModal\n      //   visible={visible}\n      //   updateForm={updateForm}\n      //   updateInputs={updateInputs}\n      //   onClose={() => {\n      //     setVisible(false);\n      //   }}\n      //   onSelect={onSelect}\n      //   selected={selected}\n      //   onUpdate={onUpdate}\n      // />\n      null}\n      <Table\n        scroll={{ x: 1300 }}\n        rowKey=\"id\"\n        //expandable={expand}\n        loading={loading}\n        columns={allColumns}\n        dataSource={data.slice(\n          page * rowPerPage,\n          page * rowPerPage + rowPerPage\n        )}\n        // pagination={{\n        //   total: count,\n        //   showSizeChanger: true,\n        //   pageSize: rowPerPage,\n        //   pageSizeOptions: [\"10\", \"20\", \"40\"],\n        //   onShowSizeChange: (page, next) => {\n        //     onPageChange(0);\n        //     onRowPerPageChange(next);\n\n        //     // fetchMoreData && fetchMoreData(rowPerPage, page);\n        //   },\n\n        //   onChange: (p, rowpage?: number) => {\n        //     fetchMoreData && fetchMoreData(rowPerPage, p);\n        //     onPageChange(p - 1);\n        //   },\n        // }}\n        pagination={false}\n        bordered\n        title={() => <div>{title}</div>}\n        size=\"middle\"\n      />\n      <br />\n      <div style={{ textAlign: \"right\" }}>\n        <Button.Group>\n          <Button\n            disabled={page === 0}\n            size=\"small\"\n            onClick={() => onPageChange(page - 1)}\n          >\n            {\"<\"}\n          </Button>\n          <div style={{ width: 5 }}> </div>\n          <Button\n            disabled={\n              data.length == count &&\n              Math.floor(data.length / rowPerPage) == page\n            }\n            size=\"small\"\n            onClick={() => {\n              onPageChange(page + 1);\n              fetchMoreData && fetchMoreData(rowPerPage, page);\n            }}\n          >\n            {\" \"}\n            {\">\"}{\" \"}\n          </Button>\n        </Button.Group>{\" \"}\n        <Select\n          onChange={(v) => {\n            onRowPerPageChange(v);\n            onPageChange(0);\n          }}\n          value={pagination.rowPerPage}\n          size=\"small\"\n        >\n          <Select.Option value={10}>10 / page</Select.Option>\n          <Select.Option value={20}>20 / page</Select.Option>\n          <Select.Option value={40}>40 / page</Select.Option>\n        </Select>\n      </div>\n    </div>\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport {\n  Modal,\n  Row,\n  Checkbox,\n  Col,\n  Divider,\n  Radio,\n  Form,\n  Button,\n  Input,\n} from \"antd\";\nimport axios from \"axios\";\nimport { type } from \"os\";\nimport { OperationVariables } from \"apollo-boost\";\nimport { stringify } from \"querystring\";\nimport { serverBaseURL } from \"../../config\";\n\nexport interface ExportProps {\n  fields?: { name: string | undefined; title: string | undefined }[];\n  mode?: \"all\" | \"page\" | \"filterd\";\n  visible: boolean;\n  onClose: () => void;\n  page?: number;\n  rowPerPage?: number;\n  variables?: OperationVariables;\n  filename?: string;\n  url?: string;\n  appName: string;\n  modelName: string;\n}\n\nexport default function Export({\n  onClose,\n  visible,\n  fields,\n  page = 0,\n  rowPerPage,\n  variables,\n  filename = \"data\",\n  url = \"export/xls\",\n  appName,\n  modelName,\n}: ExportProps): ReactElement {\n  const [checked, setChecked] = useState<\n    { name: string | undefined; title: string | undefined }[]\n  >(fields ? fields.map((f) => ({ ...f })) : []);\n\n  const [items, setItems] = useState(\"all\");\n  const [selection, setSelection] = useState(\"all\");\n  const [file, setFilename] = useState(filename);\n  return (\n    <form action={`${serverBaseURL}/${url}`} id=\"form\" method=\"get\">\n      <input hidden name=\"items\" value={items} />\n      <input hidden name=\"selection\" value={selection} />\n      <input hidden name=\"variables\" value={JSON.stringify(variables)} />\n      <input hidden name=\"filename\" value={file} />\n      <input hidden name=\"app_name\" value={appName} />\n      <input hidden name=\"model_name\" value={modelName} />\n      <input\n        hidden\n        name=\"fields\"\n        value={checked.map((f) => f.name).toString()}\n      />\n      <input\n        hidden\n        name=\"headers\"\n        value={checked.map((f) => f.title).toString()}\n      />\n      {/* <input hidden name=\"helpers\" value={JSON.stringify(checked)} /> */}\n\n      <input hidden name=\"page\" value={page} />\n      <input hidden name=\"rowPerPage\" value={rowPerPage} />\n      <Modal\n        width={800}\n        destroyOnClose\n        visible={visible}\n        footer={\n          <div>\n            <Button\n              onClick={() => {\n                onClose();\n              }}\n            >\n              fermer\n            </Button>\n            <Button type=\"primary\" htmlType=\"submit\" form=\"form\">\n              exporter\n            </Button>\n          </div>\n        }\n        okText=\"exporter\"\n        cancelText=\"fermer\"\n        onCancel={() => onClose()}\n        title=\"Exporter\"\n      >\n        <Row gutter={[10, 10]}>\n          <Col span={24}>\n            <h3>\n              <u>Colonne à exporter</u>\n            </h3>\n          </Col>\n          {fields?.map((f) => (\n            <Col span={8}>\n              <Checkbox\n                checked={checked.findIndex((i) => i.name == f.name) !== -1}\n                onChange={(e) => {\n                  if (e.target.checked && f.name) setChecked([...checked, f]);\n                  else if (!e.target.checked && f.name)\n                    setChecked(checked.filter((c) => c.name !== f.name));\n                }}\n              >\n                {f.title}\n              </Checkbox>\n            </Col>\n          ))}\n        </Row>\n        <br />\n        <Row>\n          <Col span={24}>\n            <h3>\n              <u>Nombre des items</u>\n            </h3>\n          </Col>\n          <hr />{\" \"}\n          <Col span={24}>\n            <Radio.Group\n              value={items}\n              onChange={(v) => setItems(v.target.value)}\n            >\n              <Radio value=\"all\">Tout</Radio>\n              <Radio value=\"displayed\">Elements affichés</Radio>\n            </Radio.Group>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col span={24}>\n            <h3>\n              <u>Selection</u>\n            </h3>\n          </Col>\n          <hr />{\" \"}\n          <Col span={24}>\n            <Radio.Group\n              value={selection}\n              onChange={(v) => setSelection(v.target.value)}\n            >\n              <Radio value=\"all\">Tout</Radio>\n              <Radio value=\"filter\">Resultats de la recherce</Radio>\n            </Radio.Group>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Form.Item label=\"Nom du fichier (Excel)\">\n            <Input\n              placeholder=\"nom du fichier\"\n              value={file}\n              onChange={(e) => setFilename(e.target.value)}\n            />{\" \"}\n          </Form.Item>{\" \"}\n        </Row>\n      </Modal>\n    </form>\n  );\n}\n","import React, { ReactElement, useState, useEffect } from \"react\";\nimport { ColumnsType, ColumnType } from \"antd/lib/table\";\nimport { Table, Modal, Row, Col, Button, message, Select } from \"antd\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { DocumentNode } from \"graphql\";\nimport { usePagination } from \"./utils\";\nimport { OperationVariables } from \"apollo-boost\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport {\n  EditFilled as Edit,\n  DeleteOutlined as Delete,\n} from \"@ant-design/icons\";\n\nimport {\n  PlusOutlined as ADD,\n  UploadOutlined as ExportOutlined,\n} from \"@ant-design/icons\";\n\nimport _ from \"lodash\";\nimport RLTable, { ActionsType } from \"./RLTable\";\nimport { FormInputType } from \"../form/types\";\nimport { RLForm } from \"../form\";\nimport { Store } from \"antd/lib/form/interface\";\nimport Export from \"./Export\";\n\nexport interface QueryType {\n  all: DocumentNode;\n  delete?: DocumentNode | any;\n  update?: DocumentNode | any;\n}\nconst { confirm } = Modal;\nexport interface GraphQLTableProps {\n  title?: string;\n  columns: ColumnsType;\n  graphql: QueryType;\n  createLink?: string;\n  resultTitle?: string;\n  updateLink?: string;\n  nested?: boolean;\n  isUpdatable?: (e: any) => boolean;\n  isDeletable?: (e: any) => boolean;\n  expand?: any;\n  actions?: ActionsType[];\n  updateColumn?: boolean;\n  deleteColumn?: boolean;\n  history?: RouteComponentProps[\"history\"];\n  initVariables?: OperationVariables;\n  // filters?: any[];\n  updateInputs?: FormInputType;\n  variables?: OperationVariables;\n  exportUrl?: string;\n  expprtFileName?: string;\n  appName?: string;\n  modelName?: string;\n  // onVariablesChange?: (e: any) => void;\n}\n\nexport const TableContext = React.createContext({});\nconst TableProvider = TableContext.Provider;\nexport const TableConsumer = TableContext.Consumer;\n\nconst GraphQLTable: React.FC<GraphQLTableProps> = ({\n  //********* Graphql ********* */\n  graphql,\n  resultTitle = \"response\",\n  variables,\n  initVariables = {},\n  // onVariablesChange,\n  // filters,\n  /*************Table*************/\n  title,\n  columns,\n  isDeletable = () => true,\n  isUpdatable = () => true,\n  actions = [],\n  createLink = \"\",\n  deleteColumn = true,\n  expand,\n  updateColumn = true,\n  /**************** Update *************/\n  updateInputs,\n  updateLink,\n  nested,\n  /*************Utils **************** */\n  history,\n  /*****exportation */\n  exportUrl,\n  expprtFileName,\n  appName,\n  modelName,\n}) => {\n  //const [variables, setVariables] = useState<OperationVariables>(initVariables);\n  const [selected, setSelected] = useState<any>({});\n  const [visible, setVisible] = useState(false);\n  // const onVariablesChange = (value: any) => {\n  //   setVariables({ ...variables, ...value });\n  // };\n\n  const pagination = usePagination();\n\n  const { data, loading, fetchMore, refetch } = useQuery(graphql.all, {\n    variables: {\n      ...variables,\n      limit: pagination.rowPerPage,\n      offset: 0,\n      ...initVariables,\n    },\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  let deleteItem: any;\n  let updateItem: any;\n  try {\n    [deleteItem] = useMutation(graphql.delete);\n  } catch (e) {\n    //console.log(\"no delete feature available \");\n  }\n  try {\n    [updateItem] = useMutation(graphql.update);\n  } catch (e) {\n    //console.log(\"no delete feature available \");\n  }\n  useEffect(() => {\n    pagination.onPageChange(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [variables]);\n  const fetchMoreData = (rowpage: number, page: number) => {\n    fetchMore({\n      variables: {\n        offset: data && data.response.results.length,\n        limit: rowpage,\n      },\n      updateQuery: (prev: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev;\n        return Object.assign({}, prev, {\n          response: {\n            results: [\n              ...prev.response.results,\n              ...fetchMoreResult.response.results,\n            ],\n          },\n        });\n      },\n    });\n  };\n  // const showDeleteConfirm = (item: { id: string }) => {\n  //   confirm({\n  //     title: \"Voulez-vous supprimer cet objet?\",\n  //     content: _.get(item, \"designation\", \"\"),\n  //     okText: \"supprimer\",\n  //     okType: \"danger\",\n  //     cancelText: \"annuler\",\n  //     onOk() {\n  //       if (graphql.delete)\n  //         deleteItem({ variables: { id: item.id } }).then((d: any) => {\n  //           refetch();\n  //           onPageChange(0);\n  //         });\n  //       else alert(\"cette fonctionalité est desactiver par le devloppeur\");\n  //     },\n  //   });\n  // };\n  const onDelete = (id: string | number) => {\n    deleteItem({ variables: { id } }).then((d: any) => {\n      refetch();\n    });\n  };\n  const onUpdate = (values: Store) => {\n    const variables = nested\n      ? { id: selected.id, input: { ...values } }\n      : { input: { ...values, id: selected.id } };\n\n    updateItem({ variables })\n      .then((d: any) => {\n        message.success(\"Operation avec succée\");\n        refetch();\n      })\n      .catch((e: any) => console.log(e));\n  };\n  const [exports, setExport] = useState(false);\n\n  return (\n    <TableContext.Provider value={{ refetch }}>\n      {appName && modelName ? (\n        <Export\n          appName={appName}\n          modelName={modelName}\n          filename={expprtFileName}\n          url={exportUrl}\n          variables={variables}\n          fields={columns.map((c: ColumnType<object>) => ({\n            name: c.dataIndex?.toString(),\n            title: c.title?.toString(),\n          }))}\n          visible={exports}\n          onClose={() => setExport(!exports)}\n          page={pagination.page}\n          rowPerPage={pagination.rowPerPage}\n        />\n      ) : null}\n\n      <Row justify=\"end\" gutter={[16, 10]}>\n        {appName && modelName ? (\n          <Col md={12} lg={3} xs={24}>\n            {/* <form action={`${server}/park/export/`} method=\"get\" target=\"_blank\"> */}\n            <Button\n              htmlType=\"button\"\n              icon={<ExportOutlined />}\n              danger\n              // shape=\"round\"\n              style={{ width: \"100%\" }}\n              onClick={() => setExport(true)}\n            >\n              exporter\n            </Button>\n            {/* </form> */}\n          </Col>\n        ) : null}\n        <Col md={12} lg={3} xs={24}>\n          <Button\n            style={{\n              width: \"100%\",\n              // backgroundColor: \"#5bddc0\",\n              borderWidth: 0,\n              // color: \"white\",\n              padding: 0,\n            }}\n            type=\"primary\"\n            icon={<ADD />}\n            onClick={() => history && history.push(createLink)}\n          >\n            nouveau\n          </Button>\n        </Col>\n      </Row>\n\n      <br />\n      <RLTable\n        onSelect={setSelected}\n        onUpdate={onUpdate}\n        fetchMoreData={fetchMoreData}\n        title={title}\n        pagination={pagination}\n        data={_.get(data, `response.results`, [])}\n        count={_.get(data, `${resultTitle}.totalCount`, 0)}\n        columns={columns}\n        actions={actions}\n        isDeletable={isDeletable}\n        isUpdatable={isUpdatable}\n        history={history}\n        deleteColumn={deleteColumn}\n        loading={loading}\n        onDelete={onDelete}\n        //onUpdate={}\n        refetch={refetch}\n        fetchMore={fetchMore}\n        updateColumn={updateColumn}\n        updateLink={updateLink}\n        updateInputs={updateInputs}\n      />\n    </TableContext.Provider>\n  );\n};\nexport default GraphQLTable;\n","import { useState } from \"react\";\n\nexport interface PaginationType {\n  rowPerPage: number;\n  page: number;\n  onRowPerPageChange: (rowPerPage: number) => void;\n  onPageChange: (rowPerPage: number) => void;\n}\n\nexport const usePagination = (\n  rows: number = 10,\n  p: number = 0\n): PaginationType => {\n  const [rowPerPage, setRowPerPage] = useState<number>(rows);\n  const [page, setPage] = useState<number>(p);\n  return {\n    rowPerPage,\n    page,\n    onRowPerPageChange: setRowPerPage,\n    onPageChange: setPage,\n  };\n};\n","import React, { ReactElement } from \"react\";\nimport { Row, Col } from \"antd\";\nimport { InputFactory } from \"../inputs\";\nimport Form, { FormInstance } from \"antd/lib/form\";\nimport { InputFieldType, InputUnionType } from \"../types/FilterTypes\";\nimport { FieldType } from \"../form/types\";\n\ninterface ViewToolbarProps {\n  filters?: FieldType[];\n  variables?: any[];\n  onVariablesChange: (e: any) => void;\n  form?: FormInstance;\n}\n\nexport default function ViewToolbar({\n  filters,\n  variables,\n  onVariablesChange,\n  form,\n}: ViewToolbarProps): ReactElement {\n  return (\n    <Form form={form}>\n      <Row gutter={[16, 2]}>\n        {filters?.map((f, index: number) => (\n          <Col lg={f.span || 4} md={6} sm={24} xs={24}>\n            <InputFactory\n              key={index}\n              fieldDef={f}\n              label={false}\n              onChange={onVariablesChange}\n            />\n          </Col>\n        ))}\n      </Row>\n    </Form>\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport GraphQLTable, {\n  GraphQLTableProps,\n  QueryType,\n} from \"../table/GraphQLTable\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { OperationVariables } from \"apollo-boost\";\nimport { ViewToolbar } from \".\";\nimport { useForm } from \"antd/lib/form/util\";\nimport { InputFieldType, InputUnionType } from \"../types/FilterTypes\";\nimport { FieldType, FormInputType } from \"../form/types\";\nimport { ActionsType } from \"../table/RLTable\";\n\ninterface Props {\n  title?: string;\n  columns: ColumnsType;\n  graphql: QueryType;\n  createLink?: string;\n  updateLink?: string;\n  nested?: boolean;\n  isUpdatable?: () => boolean;\n  isDeletable?: () => boolean;\n  expand?: any;\n  actions?: ActionsType[];\n  updateColumn?: boolean;\n  deleteColumn?: boolean;\n  history?: RouteComponentProps[\"history\"];\n  initVariables?: OperationVariables;\n  filters?: FieldType[];\n  updateInputs?: FormInputType;\n  resultTitle?: string;\n  exportUrl?: string;\n  expprtFileName?: string;\n  appName?: string;\n  modelName?: string;\n}\n\nexport default function GraphQLTableView({\n  columns,\n  graphql,\n  resultTitle = \"response\",\n  filters,\n  updateColumn = true,\n  deleteColumn = true,\n  isUpdatable = () => true,\n  isDeletable = () => true,\n  actions = [],\n  createLink = \"\",\n  expand,\n  nested,\n  title,\n  updateLink,\n  history,\n  initVariables = {},\n  updateInputs,\n  exportUrl,\n  expprtFileName,\n  appName,\n  modelName,\n}: Props): ReactElement {\n  const { delete: deleteMutation, all, update } = graphql;\n  const [variables, setVariables] = useState<OperationVariables>(initVariables);\n  //const [filtersForm] = useForm();\n  const onVariablesChange = (value: any) => {\n    setVariables({ ...variables, ...value });\n  };\n\n  return (\n    <div>\n      <ViewToolbar\n        filters={filters}\n        onVariablesChange={onVariablesChange}\n        // form={filtersForm}\n      />\n\n      <GraphQLTable\n        exportUrl={exportUrl}\n        expprtFileName={expprtFileName}\n        actions={actions}\n        title={title}\n        columns={columns}\n        graphql={{ all, delete: deleteMutation, update }}\n        variables={variables}\n        createLink={createLink}\n        deleteColumn={deleteColumn}\n        expand={expand}\n        history={history}\n        initVariables={initVariables}\n        isDeletable={isDeletable}\n        isUpdatable={isUpdatable}\n        nested={nested}\n        resultTitle={resultTitle}\n        updateColumn={updateColumn}\n        updateLink={updateLink}\n        updateInputs={updateInputs}\n        appName={appName}\n        modelName={modelName}\n        //onVariableChange={onVariablesChange}\n      ></GraphQLTable>\n    </div>\n  );\n}\n","import gql from \"graphql-tag\";\n\nexport const FETCH_CLIENTS = gql`\n  query fetchClients(\n    $raison_social: String\n    $code_client: String\n    $limit: Int\n    $offset: Int\n  ) {\n    response: all_clients(\n      raison_social__icontains: $raison_social\n      code_client__icontains: $code_client\n    ) {\n      results(limit: $limit, offset: $offset) {\n        id\n        raison_social\n        code_client\n        address\n        email\n        phone\n        # barem {\n        #   designation\n        #   id\n        # }\n        contacts {\n          nom\n          prenom\n          fonction\n          email\n          phone\n        }\n      }\n      totalCount\n    }\n  }\n`;\n","import * as queryBuilder from \"gql-query-builder\";\nimport gql from \"graphql-tag\";\nimport _ from \"lodash\";\nimport { DocumentNode } from \"graphql\";\n\nexport const deleteMutation = (operation: string) => {\n  return gql(\n    queryBuilder.mutation({\n      operation,\n      variables: { id: { type: \"ID!\" } },\n      fields: [\"ok\", { errors: [\"field\", \"messages\"] }],\n    }).query\n  );\n};\n\n/**\n * generate Graphql mutation.\n * @author Milia\n * @param {string} operation - The name of the mutation ex: create_client.\n * @param {string} author - The type of mutation ex : CreateGenericClient!.\n * @param {string} input  The input object name ex: new_client @default \"input\".\n */\nexport const createMutation = (\n  operation: string,\n  type: string,\n  input = \"input\"\n) => {\n  return gql(\n    queryBuilder.mutation({\n      operation: `response:${operation}`,\n      variables: { [input]: { type } },\n      fields: [\"ok\", { errors: [\"field\", \"messages\"] }],\n    }).query\n  );\n};\nexport const simple_mutation = (\n  operation: string,\n  type: string,\n  input: string = \"input\"\n) => {\n  return gql(\n    queryBuilder.mutation({\n      operation: `response:${operation}`,\n      variables: { [input]: { type } },\n      // fields: [\"ok\", { errors: [\"field\", \"messages\"] }]\n    }).query\n  );\n};\nexport const createNestedMutation = (\n  operation: string,\n  type: string,\n  response: string,\n  input: string = \"input\"\n) => {\n  return gql(\n    queryBuilder.mutation({\n      operation: `response:${operation}`,\n      variables: { [input]: { type } },\n      fields: [{ [`ok:${response}`]: [\"id\"] }],\n    }).query\n  );\n};\nexport const createNestedUpdateMutation = (\n  operation: string,\n  type: string,\n  response: string,\n  input = \"input\"\n) => {\n  return gql(\n    queryBuilder.mutation({\n      operation: `response:${operation}`,\n      variables: { [input]: { type }, id: { type: \"ID!\" } },\n      fields: [{ [`ok:${response}`]: [\"id\"] }],\n    }).query\n  );\n};\n\nexport const simple_query = (\n  operation: string,\n  fields: (string | object)[] = [\"designation\"],\n  variables?: object\n): DocumentNode => {\n  return gql(\n    queryBuilder.query({\n      operation: `response:${operation}`,\n      variables,\n      fields: [\"id\", ...fields],\n    }).query\n  );\n};\n","import React from \"react\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport { FieldType, FormInputType } from \"../../../lib/form/types\";\nimport _ from \"lodash\";\nimport { Button } from \"antd\";\nimport { simple_query } from \"../../../lib/utils\";\nexport const contactColumns: ColumnsType = [\n  {\n    dataIndex: \"nom\",\n    title: \"Nom\",\n  },\n  {\n    dataIndex: \"prenom\",\n    title: \"Prenom\",\n  },\n  {\n    dataIndex: \"fonction\",\n    title: \"Fonction\",\n  },\n  {\n    dataIndex: \"email\",\n    title: \"Email\",\n  },\n  {\n    dataIndex: \"phone\",\n    title: \"Téléphone\",\n  },\n  {\n    title: \"Client\",\n    dataIndex: \"client\",\n    render: (b) => (\n      <Button type=\"primary\" size=\"small\" onClick={() => alert(b.id)}>\n        {_.get(b, \"raison_social\", \"undefinit\")}\n      </Button>\n    ),\n  },\n];\nexport const contactInput: FormInputType = {\n  title: \"Nouveau Contacts\",\n\n  // graphql: graphqlName,\n  fields: [\n    {\n      title: \"Nom\",\n      name: \"nom\",\n      properties: { type: \"text\" },\n      required: true,\n    },\n    {\n      title: \"Prenom\",\n      name: \"prenom\",\n      properties: { type: \"text\" },\n      required: true,\n    },\n    {\n      title: \"Email\",\n      name: \"email\",\n      properties: { type: \"email\" },\n    },\n    {\n      title: \"Téléphone\",\n      name: \"phone\",\n      properties: { type: \"text\" },\n    },\n\n    {\n      title: \"Fonction\",\n      name: \"fonction\",\n      properties: { type: \"text\" },\n    },\n  ],\n};\nexport const contactFilters: FieldType[] = [];\n\nexport const inputContactWithClient: FormInputType = {\n  ...contactInput,\n  fields: [\n    ...contactInput.fields,\n    {\n      name: \"client\",\n      title: \"Client\",\n      properties: {\n        type: \"select\",\n        show: \"raison_social\",\n        query: simple_query(\"clients\", [\"raison_social\"]),\n      },\n      required: true,\n      // get: \"client.id\",\n    },\n  ],\n};\n","import React from \"react\";\nimport { simple_query } from \"../../lib/utils\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport { FieldType, FormInputType } from \"../../lib/form/types\";\nimport { Button } from \"antd\";\nimport _ from \"lodash\";\nimport { contactInput } from \"./contact/info\";\n\nexport const clientColumns: ColumnsType = [\n  { title: \"Raison Social\", dataIndex: \"raison_social\" },\n  { title: \"Code Client\", dataIndex: \"code_client\" },\n  { title: \"address\", dataIndex: \"address\" },\n  { title: \"email\", dataIndex: \"email\" },\n  { title: \"Telephone\", dataIndex: \"phone\" },\n  { title: \"Fix\", dataIndex: \"fix\" },\n  { title: \"Fax\", dataIndex: \"fax\" },\n  { title: \"NIF\", dataIndex: \"NIF\" },\n  { title: \"TIN\", dataIndex: \"TIN\" },\n  { title: \"RC\", dataIndex: \"RC\" },\n  // {\n  //   title: \"Barem\",\n  //   dataIndex: \"barem\",\n  //   render: (b) => (\n  //     <Button type=\"primary\" size=\"small\" onClick={() => alert(b.id)}>\n  //       {_.get(b, \"designation\", \"undefinit\")}\n  //     </Button>\n  //   ),\n  // },\n];\nexport const clientInput: FormInputType = {\n  title: \"Information Générale\",\n  fields: [\n    {\n      name: \"raison_social\",\n      title: \"Raison_social\",\n      required: true,\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"code_client\",\n      title: \"Code Client\",\n      required: true,\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"address\",\n      title: \"Adresse\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"phone\",\n      title: \"Mobile\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"fix\",\n      title: \"Fix\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"fax\",\n      title: \"Fax\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"email\",\n      title: \"Email\",\n      properties: { type: \"email\" },\n    },\n    {\n      name: \"NIF\",\n      title: \"NIF\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"TIN\",\n      title: \"TIN\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"RC\",\n      title: \"N° registre commercial\",\n      properties: { type: \"text\" },\n    },\n    // {\n    //   name: \"barem\",\n    //   title: \"Barem\",\n    //   query: simple_query(\"barems\"),\n    //   get: \"barem.id\",\n    //   type: \"select\",\n    // },\n  ],\n};\nexport const clientFilters: FieldType[] = [\n  {\n    title: \"Raison Social\",\n    name: \"raison_social\",\n    properties: { type: \"text\" },\n  },\n  { title: \"Code Client\", name: \"code_client\", properties: { type: \"text\" } },\n];\n\nexport const inputClientWithContact: FormInputType = {\n  ...clientInput,\n\n  fields: [\n    ...clientInput.fields,\n    {\n      title: \"Contacts\",\n      name: \"contact\",\n      properties: { type: \"multiple\", fields: contactInput.fields },\n    },\n  ],\n};\n\nexport const inputClientWithContactCreate: FormInputType = {\n  ...clientInput,\n  fields: [\n    ...clientInput.fields,\n    {\n      title: \"Contacts\",\n      name: \"contacts_add\",\n      properties: { type: \"multiple\", fields: contactInput.fields },\n    },\n  ],\n};\n","import gql from \"graphql-tag\";\n\nexport const ALL_CONTACTS = gql`\n  query fetchContacts(\n    $nom: String\n    $prenom: String\n    $phone: String\n    $email: String\n    $client: ID\n    $limit: Int\n    $offset: Int\n  ) {\n    response: all_contacts(\n      nom__icontains: $nom\n      prenom__icontains: $prenom\n      email__icontains: $email\n      phone__icontains: $phone\n      client: $client\n    ) {\n      results(limit: $limit, offset: $offset) {\n        id\n        nom\n        prenom\n        fonction\n        email\n        phone\n        client {\n          raison_social\n          id\n        }\n      }\n      totalCount\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { ColumnsType } from \"antd/lib/table\";\nimport { FieldType, FormInputType } from \"../../lib/form/types\";\nimport { Tag } from \"antd\";\nimport { simple_query } from \"../../lib/utils\";\nexport const parkColumns: ColumnsType = [\n  {\n    title: \"Designation\",\n    dataIndex: \"model\",\n    render: (m) => <div>{m && m.designation}</div>,\n  },\n  {\n    title: \"Marque\",\n    dataIndex: \"marque\",\n    render: (m) => <Tag color=\"green\">{m}</Tag>,\n  },\n  {\n    title: \"Matricule\",\n    dataIndex: \"matricule\",\n  },\n  {\n    title: \"Nature\",\n    dataIndex: \"nature\",\n  },\n  {\n    title: \"Année\",\n    dataIndex: \"year\",\n    render: (y) => <Tag color=\"default\">{y}</Tag>,\n  },\n];\n\nexport const parkInputs: FormInputType = {\n  title: \"Nouvelle Véhicule\",\n  fields: [\n    {\n      name: \"model\",\n      title: \"Model\",\n      required: true,\n      properties: {\n        divider: \"engine_type.designation\",\n        type: \"select\",\n        query: simple_query(\"enginemodels\", [\n          \"designation\",\n          { engine_type: [\"designation\"] },\n        ]),\n        get: \"model.id\",\n      },\n    },\n    {\n      name: \"marque\",\n      title: \"Marque\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"matricule\",\n      required: true,\n      title: \"Matricule\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"nature\",\n      title: \"Nature\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"year\",\n      title: \"Année\",\n      properties: { type: \"date\", picker: \"year\" },\n    },\n  ],\n  info: \"creer une nouvelle véhicule dans le park Rail Logistic\",\n};\nexport const parkUpdate: FormInputType = {\n  title: \"Mettre à jour Véhicule\",\n  fields: [\n    {\n      name: \"model\",\n      editable: false,\n      title: \"Model\",\n      required: true,\n      properties: {\n        divider: \"engine_type.designation\",\n        type: \"select\",\n        query: simple_query(\"enginemodels\", [\n          \"designation\",\n          { engine_type: [\"designation\"] },\n        ]),\n        get: \"model.id\",\n      },\n    },\n    {\n      name: \"marque\",\n      title: \"Marque\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"matricule\",\n      required: true,\n      title: \"Matricule\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"nature\",\n      title: \"Nature\",\n      properties: { type: \"text\" },\n    },\n    {\n      name: \"year\",\n      title: \"Année\",\n      properties: { type: \"number\" },\n    },\n  ],\n  info: \"creer une nouvelle véhicule dans le park Rail Logistic\",\n};\nexport const parkFilters: FieldType[] = [\n  {\n    name: \"model\",\n    title: \"Model\",\n    span: 5,\n    properties: {\n      divider: \"engine_type.designation\",\n      type: \"select\",\n      query: simple_query(\"enginemodels\", [\n        \"designation\",\n        { engine_type: [\"designation\"] },\n      ]),\n      get: \"model.id\",\n    },\n  },\n  {\n    name: \"matricule__icontains\",\n    title: \"Matricule\",\n    properties: { type: \"text\" },\n  },\n  {\n    name: \"marque__icontains\",\n    title: \"Marque\",\n    properties: { type: \"text\" },\n  },\n\n  // {\n  //   name: \"year\",\n  //   title: \"Année\",\n  //   properties: { type: \"number\" },\n  // },\n];\n","import gql from \"graphql-tag\";\n\nexport const ALL_ENGINES = gql`\n  query ALL_ENGINES(\n    $limit: Int\n    $offset: Int\n    $matricule__icontains: String\n    $year: Int\n    $marque__icontains: String\n    $model: ID\n  ) {\n    response: all_engines(\n      matricule__icontains: $matricule__icontains\n      marque__icontains: $marque__icontains\n      year__icontains: $year\n      model: $model\n    ) {\n      results(limit: $limit, offset: $offset) {\n        id\n        marque\n        matricule\n        model {\n          id\n          designation\n        }\n        nature\n        year\n      }\n      totalCount\n    }\n  }\n`;\n","import React, { ReactElement } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { ClientList, ClientCreate } from \"./apps/clients\";\nimport { contactList, contactCreate } from \"./apps/clients/contact\";\nimport { ParkList, ParkCreate } from \"./apps/park\";\n\ninterface RouteProps {\n  path: string;\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\nexport const routes: RouteProps[] = [\n  {\n    component: ClientList,\n    path: \"/clients/list\",\n  },\n  {\n    component: ClientCreate,\n    path: \"/clients/new\",\n  },\n  {\n    path: \"/clients/contacts/list\",\n    component: contactList,\n  },\n  {\n    path: \"/clients/contacts/new\",\n    component: contactCreate,\n  },\n  {\n    path: \"/park/vehicules/list\",\n    component: ParkList,\n  },\n  {\n    path: \"/park/vehicules/create\",\n    component: ParkCreate,\n  },\n];\n","import React, { ReactElement } from \"react\";\nimport GraphQLTableView from \"../../lib/views/GraphQLTableView\";\nimport { FETCH_CLIENTS } from \"./graphql\";\nimport { clientColumns, clientFilters } from \"./info\";\nimport { browserHistory } from \"../../config\";\nimport { deleteMutation } from \"../../lib/utils\";\nimport { EyeFilled } from \"@ant-design/icons\";\nimport UpdateModal from \"../../lib/table/UpdateModal\";\ninterface Props {}\n\nexport default function list({}: Props): ReactElement {\n  return (\n    <div>\n      {/* <UpdateModal /> */}\n      <GraphQLTableView\n        title=\"List des clients\"\n        history={browserHistory}\n        createLink=\"/clients/new\"\n        columns={clientColumns}\n        filters={clientFilters}\n        graphql={{\n          all: FETCH_CLIENTS,\n          delete: deleteMutation(\"delete_client\"),\n        }}\n        expprtFileName=\"clients\"\n        appName=\"clients\"\n        modelName=\"Client\"\n      />\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport GraphQLForm from \"../../lib/form/GraphQLForm\";\nimport { createNestedMutation } from \"../../lib/utils\";\nimport { browserHistory } from \"../../config\";\nimport { inputClientWithContactCreate } from \"./info\";\n\ninterface Props {}\n\nexport default function create({}: Props): ReactElement {\n  return (\n    <GraphQLForm\n      history={browserHistory}\n      span={8}\n      label\n      inputs={inputClientWithContactCreate}\n      mutation={createNestedMutation(\n        \"create_nested_client\",\n        \"CreateClientInput!\",\n        \"client\"\n      )}\n    />\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { contactColumns as columns } from \"./info\";\nimport { contactFilters as filters } from \"./info\";\nimport { browserHistory } from \"../../../config\";\nimport GraphQLTableView from \"../../../lib/views/GraphQLTableView\";\nimport { deleteMutation, createMutation } from \"../../../lib/utils\";\nimport gql from \"graphql-tag\";\nimport { ALL_CONTACTS } from \"./graphql/queries\";\ninterface Props {}\nexport default function list({}: Props): ReactElement {\n  return (\n    <div>\n      <GraphQLTableView\n        columns={columns}\n        filters={filters}\n        createLink=\"/clients/contacts/new\"\n        actions={[]}\n        initVariables={{}}\n        deleteColumn={false}\n        updateColumn={false}\n        history={browserHistory}\n        graphql={{\n          all: ALL_CONTACTS,\n          // delete: deleteMutation(\"\"),\n          // update: createMutation(\"\", \"\"),\n        }}\n        expprtFileName=\"contacts\"\n        appName=\"clients\"\n        modelName=\"Contact\"\n      />\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport GraphQLForm from \"../../../lib/form/GraphQLForm\";\nimport { createNestedMutation, createMutation } from \"../../../lib/utils\";\nimport { browserHistory } from \"../../../config\";\nimport { contactInput, inputContactWithClient } from \"./info\";\ninterface Props {}\nexport default function create({}: Props): ReactElement {\n  return (\n    <GraphQLForm\n      label={true}\n      span={12}\n      history={browserHistory}\n      inputs={inputContactWithClient}\n      initialValues={{}}\n      mutation={createMutation(\"create_contact\", \"ContactCreateGenericType!\")}\n    />\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { parkColumns as columns, parkInputs, parkUpdate } from \"./info\";\nimport { parkFilters as filters } from \"./info\";\nimport { browserHistory } from \"../../config\";\nimport GraphQLTableView from \"../../lib/views/GraphQLTableView\";\nimport { deleteMutation, createMutation } from \"../../lib/utils\";\nimport gql from \"graphql-tag\";\nimport { ALL_ENGINES } from \"./graphql/queries\";\ninterface Props {}\nexport default function list({}: Props): ReactElement {\n  return (\n    <div>\n      <GraphQLTableView\n        title=\"Liste des Véhicules de Rail Logistic\"\n        columns={columns}\n        filters={filters}\n        createLink=\"/park/vehicules/create\"\n        actions={[]}\n        initVariables={{}}\n        deleteColumn={false}\n        updateColumn={true}\n        updateInputs={{\n          title: parkUpdate.title,\n          fields: parkUpdate.fields,\n        }}\n        history={browserHistory}\n        graphql={{\n          all: ALL_ENGINES,\n          delete: deleteMutation(\"delete_engine\"),\n          update: createMutation(\"update_engine\", \"EngineUpdateGenericType!\"),\n        }}\n        expprtFileName=\"Park rail logistic\"\n        appName=\"park\"\n        modelName=\"Engine\"\n      />\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport GraphQLForm from \"../../lib/form/GraphQLForm\";\nimport { createMutation } from \"../../lib/utils\";\n\nimport { browserHistory } from \"../../config\";\nimport { parkInputs as inputs } from \"./info\";\ninterface Props {}\nexport default function create({}: Props): ReactElement {\n  return (\n    <GraphQLForm\n      label\n      buildInput={(values) => ({ ...values, year: values.year?.year() })}\n      title=\"Nouvelle Véhicule\"\n      span={12}\n      history={browserHistory}\n      inputs={inputs}\n      initialValues={{}}\n      mutation={createMutation(\"create_engine\", \"EngineCreateGenericType!\")}\n    />\n  );\n}\n","import React from \"react\";\nimport { routes } from \"../../routes\";\nimport { Layout } from \"antd\";\nimport { Switch, Route } from \"react-router-dom\";\n\nexport default function Content() {\n  return (\n    <Layout.Content\n      className=\"content\"\n      style={{\n        minHeight: 280,\n      }}\n    >\n      <Switch>\n        {routes.map((r) => (\n          <Route path={r.path} component={r.component} exact></Route>\n        ))}\n      </Switch>\n    </Layout.Content>\n  );\n}\n","import { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ApolloLink } from \"apollo-boost\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport ApolloClient from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\nimport { ServerError, ServerParseError } from \"apollo-link-http-common\";\nimport { serverUrl } from \"./config\";\n\nexport const errorLink = onError(\n  ({ graphQLErrors, networkError, response }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path, nodes }) => {\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n        );\n        console.log(locations);\n      });\n    if (networkError) console.log(networkError);\n    if (\n      networkError &&\n      (networkError as ServerError).result &&\n      (networkError as ServerError).result.map\n    )\n      (networkError as ServerError).result.map((e: any) => console.log(e));\n\n    if (networkError && (networkError as ServerError).statusCode === 401) {\n      // remove cached token on 401 from the server\n      // window.location.replace('/login');\n    }\n  }\n);\n// Creating the link to the graphql server\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: \"no-cache\",\n    errorPolicy: \"ignore\",\n  },\n\n  query: {\n    fetchPolicy: \"no-cache\",\n    errorPolicy: \"all\",\n  },\n};\nconst authLink: ApolloLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"token\");\n  // if (!token) console.log('ldùsmdlùsdlm');\n\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `JWT ${token}` : \"\",\n    },\n  };\n});\nconst authMiddleware: ApolloLink = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const token = localStorage.getItem(\"token\");\n  if (token == null) window.location.replace(\"/\");\n  operation.setContext({\n    headers: {\n      authorization: token ? `JWT ${token}` : \"\",\n    },\n  });\n\n  return forward(operation);\n});\nconst link: BatchHttpLink = new BatchHttpLink({\n  uri: serverUrl,\n  credentials: \"same-origin\",\n});\n// const resetToken = onError(({ response, networkError }) => {\n//   if (networkError && networkError.statusCode === 401) {\n//     // remove cached token on 401 from the server\n//     localStorage.clear();\n//   }\n// });\n// Creating the client\nexport const client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache: new InMemoryCache({\n    addTypename: false,\n  }),\n\n  link: ApolloLink.from([errorLink, authLink, link]), // authLink,\n  //defaultOptions,\n});\n","// import Location from \"./icons/deal.png\";\nimport React from \"react\";\n\nimport {\n  PieChartFilled as Dashboard,\n  FolderAddFilled as Location,\n  CarFilled as Park,\n} from \"@ant-design/icons\";\n\ninterface LinkTypeBase {\n  title: string;\n  href: string;\n  icon?: any;\n}\nexport interface SingleLinkType extends LinkTypeBase {\n  type: \"signle\";\n}\nexport interface MultipleLinkType extends Omit<LinkTypeBase, \"href\"> {\n  type: \"multiple\";\n  pages: LinkTypeBase[];\n}\n\nexport type LinkType = MultipleLinkType | SingleLinkType;\n\nexport const links: LinkType[] = [\n  {\n    title: \"Dashboard\",\n    href: \"/dashboard\",\n    type: \"signle\",\n    icon: <Dashboard />,\n  },\n  {\n    title: \"Clients\",\n    type: \"multiple\",\n    icon: <Location />,\n    pages: [\n      {\n        title: \"List des clients\",\n        href: \"/clients/list\",\n      },\n      {\n        title: \"Nouveau Client\",\n        href: \"/clients/new\",\n      },\n      {\n        title: \"contacts\",\n        href: \"/clients/contacts/list\",\n      },\n    ],\n  },\n  {\n    title: \"Park\",\n    type: \"multiple\",\n    icon: <Park />,\n    pages: [\n      {\n        href: \"/park/vehicules/list\",\n        title: \"List\",\n      },\n      {\n        href: \"/park/vehicules/create\",\n        title: \"Nouveau Véhicule\",\n      },\n    ],\n  },\n];\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Layout, Button, Row, Col, Drawer } from \"antd\";\nimport Sidebar from \"./layouts/sidebar/sidebar\";\nimport Content from \"./layouts/content\";\nimport { Router as BrowserRouter } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { client } from \"./graphql\";\nimport Title from \"antd/lib/typography/Title\";\nimport { createBrowserHistory } from \"history\";\nimport { UserOutlined, MenuFoldOutlined as MenuIcon } from \"@ant-design/icons\";\nimport { browserHistory, appTitle } from \"./config\";\nimport { links } from \"./links\";\n\nexport const TitleContext = React.createContext({});\n\nfunction App() {\n  const [title, setValue] = useState(appTitle);\n  const [drawer, setDrawer] = useState(false);\n  return (\n    <TitleContext.Provider value={{ title, setValue }}>\n      <ApolloProvider client={client}>\n        <BrowserRouter history={browserHistory}>\n          <Layout style={{ height: \"100%\" }}>\n            <div className=\"sidebarContainer\">\n              <Sidebar color=\"dark\" links={links}></Sidebar>\n            </div>\n            <Drawer\n              style={{ padding: 0, margin: 0 }}\n              width={250}\n              placement=\"left\"\n              closable={false}\n              onClose={() => setDrawer(false)}\n              visible={drawer}\n            >\n              <Sidebar color=\"dark\" links={links} />\n            </Drawer>\n            <Layout>\n              <Layout.Header\n                style={{\n                  // boxShadow: \"1px 1px 2px 1px gray\",\n                  backgroundColor: \"white\",\n                  padding: 0,\n                }}\n              >\n                <Row\n                  justify=\"space-between\"\n                  align=\"middle\"\n                  style={{ width: \"100%\", paddingRight: 16, paddingLeft: 16 }}\n                >\n                  <Col span={20} style={{ textAlign: \"left\" }}>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"baseline\",\n                        lineHeight: 0,\n                      }}\n                    >\n                      <Title\n                        level={3}\n                        //style={{ fontFamily: \"Arial\", lineHeight: 0 }}\n                      >\n                        {title}\n                      </Title>\n                    </div>\n                  </Col>\n                  <Col span={4} style={{ textAlign: \"right\" }}>\n                    <Button\n                      onClick={() => {\n                        setDrawer(true);\n                      }}\n                      className=\"showMenu\"\n                      icon={<MenuIcon />}\n                      style={{ marginLeft: \"auto\" }}\n                    />\n                  </Col>\n                </Row>\n              </Layout.Header>\n              <Content />\n            </Layout>\n          </Layout>\n        </BrowserRouter>\n      </ApolloProvider>\n    </TitleContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}