{"version":3,"sources":["layouts/sidebar/Profile.jsx","config.ts","layouts/sidebar/sidebar.tsx","routes.tsx","layouts/content/index.tsx","graphql.ts","links.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Profile","data","useQuery","gql","style","width","height","display","justifyContent","flexDirection","bordered","backgroundColor","textAlign","size","src","window","location","hostname","_","get","type","color","level","browserHistory","createBrowserHistory","Sidebar","links","useState","collapse","setCollapse","Sider","collapsible","breakpoint","paddingTop","collapsed","onCollapse","e","theme","mode","defaultSelectedKeys","pathname","defaultOpenKeys","filter","l","pages","findIndex","p","href","map","title","link","index","Item","key","className","icon","to","SubMenu","index2","routes","Content","margin","padding","background","minHeight","r","path","component","exact","errorLink","onError","graphQLErrors","networkError","response","message","locations","nodes","console","log","result","statusCode","authLink","setContext","headers","token","localStorage","getItem","authorization","ApolloLink","operation","forward","replace","BatchHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","addTypename","from","TitleContext","React","createContext","App","setValue","Provider","value","history","Header","justify","align","span","alignItems","paddingLeft","lineHeight","UserOutlined","marginLeft","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+lBAOe,SAASA,IAAW,IACvBC,EAASC,YAASC,IAAA,MAAlBF,KAYR,OACI,yBAAKG,MAAO,CAACC,MAAM,OAAOC,OAAO,IAAIC,QAAQ,OAAOC,eAAe,SAASC,cAAc,QAC1F,kBAAC,IAAD,CAAMC,UAAU,EAAQN,MAAO,CAACO,gBAAgB,cAAcC,UAAU,WACpE,kBAAC,IAAD,CAASC,KAAK,QAASC,IAAG,iBAAYC,OAAOC,SAASC,SAA5B,iBAA6CC,IAAEC,IAAIlB,EAAM,mBAAoB,OACvG,6BACA,kBAAC,IAAD,CAAamB,KAAK,SAAShB,MAAO,CAACiB,MAAM,QAAQT,UAAU,UAAWU,MAAO,GAA7E,kB,YCvBCC,EAAiBC,cCWf,SAASC,EAAT,GAA2D,IAAD,IAAvCJ,aAAuC,MAA/B,OAA+B,EAAvBK,EAAuB,EAAvBA,MAAuB,EACvCC,oBAAS,GAD8B,mBAChEC,EADgE,KACtDC,EADsD,KAEvE,OACE,kBAAC,IAAOC,MAAR,CACEC,aAAW,EACXC,WAAW,KACX3B,MAAM,MACND,MAAO,CAAE6B,WAAY,IACrBC,UAAWN,EACXO,WAAY,SAACC,GAAD,OAAOP,GAAaD,KAEhC,kBAAC5B,EAAD,MACA,kBAAC,IAAD,CACEqC,MAAOhB,EACPiB,KAAK,SACLC,oBAAqB,CAAChB,EAAeP,SAASwB,UAC9CC,gBAAiBf,EACdgB,QAAO,SAACC,GAAD,MACK,aAAXA,EAAEvB,OAGS,IAFPuB,EAAEC,MAAMC,WACN,SAACC,GAAD,OAAOA,EAAEC,OAASxB,EAAeP,SAASwB,eAIjDQ,KAAI,SAACF,GAAD,OAAOA,EAAEG,UAEfvB,EAAMsB,KAAI,SAACE,EAAMC,GAChB,MAAkB,WAAdD,EAAK9B,KAEL,kBAAC,IAAKgC,KAAN,CAAWC,IAAKH,EAAKH,KAAMO,UAAU,eACnC,oCACGJ,EAAKK,KACN,kCAAQL,EAAKD,OACb,kBAAC,IAAD,CAAMO,GAAIN,EAAKH,SAMnB,kBAAC,IAAKU,QAAN,CACEJ,IAAKH,EAAKD,MACVA,MACE,8BACGC,EAAKK,KAEN,8BAAOL,EAAKD,SAIfC,EAAKN,MAAMI,KAAI,SAACF,EAAGY,GAAJ,OACd,kBAAC,IAAKN,KAAN,CAAWC,IAAKP,EAAEC,MAChB,oCAAUD,EAAEG,OACZ,kBAAC,IAAD,CAAMO,GAAIV,EAAEC,iBCvDzB,IAAMY,EAAuB,G,QCLrB,SAASC,IACtB,OACE,kBAAC,IAAOA,QAAR,CACExD,MAAO,CACLyD,OAAQ,YACRC,QAAS,GACTC,WAAY,GACZC,UAAW,MAGb,kBAAC,IAAD,KACGL,EAAOX,KAAI,SAACiB,GAAD,OACV,kBAAC,IAAD,CAAOC,KAAMD,EAAEC,KAAMC,UAAWF,EAAEE,UAAWC,OAAK,S,yECT/CC,EAAYC,aACvB,YAAgD,IAA7CC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,aAA6B,EAAfC,SAC1BF,GACFA,EAAcvB,KAAI,YAA0C,IAAvC0B,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,UAAWT,EAAkB,EAAlBA,KAAkB,EAAZU,MAC7CC,QAAQC,IAAR,oCAC+BJ,EAD/B,uBACqDC,EADrD,mBACyET,IAEzEW,QAAQC,IAAIH,MAEZH,GAAcK,QAAQC,IAAIN,GAE5BA,GACCA,EAA6BO,QAC7BP,EAA6BO,OAAO/B,KAEpCwB,EAA6BO,OAAO/B,KAAI,SAACZ,GAAD,OAAYyC,QAAQC,IAAI1C,MAE/DoC,GAAiBA,EAA6BQ,cAkBhDC,EAAuBC,aAAW,SAAChE,EAAD,GAAqB,IAAfiE,EAAc,EAAdA,QAEtCC,EAAQC,aAAaC,QAAQ,SAInC,MAAO,CACLH,QAAQ,eACHA,EADE,CAELI,cAAeH,EAAK,cAAUA,GAAU,SAgBxClC,GAZ6B,IAAIsC,KAAW,SAACC,EAAWC,GAE5D,IAAMN,EAAQC,aAAaC,QAAQ,SAQnC,OAPa,MAATF,GAAerE,OAAOC,SAAS2E,QAAQ,KAC3CF,EAAUP,WAAW,CACnBC,QAAS,CACPI,cAAeH,EAAK,cAAUA,GAAU,MAIrCM,EAAQD,MAEW,IAAIG,IAAc,CAC5CC,IAAI,UAAD,OAAY9E,OAAOC,SAASC,SAA5B,aACH6E,YAAa,iBASFC,EAA8C,IAAIC,IAAa,CAC1EC,MAAO,IAAIC,IAAc,CACvBC,aAAa,IAGfjD,KAAMsC,IAAWY,KAAK,CAAC/B,EAAWY,EAAU/B,M,6CC7DjCxB,EAAoB,CAC/B,CACEuB,MAAO,YACPF,KAAM,aACN3B,KAAM,SACNmC,KAAM,kBAAC,IAAD,OAER,CACEN,MAAO,OACP7B,KAAM,WACNmC,KAAM,kBAAC,IAAD,MACNX,MAAO,CACL,CACEK,MAAO,cACPF,KAAM,WAER,CACEE,MAAO,cACPF,KAAM,cC1BDsD,EAAeC,IAAMC,cAAc,IAwEjCC,MAtEf,WAAgB,IAAD,EACa7E,mBAAS,QADtB,mBACNsB,EADM,KACCwD,EADD,KAEb,OACE,kBAACJ,EAAaK,SAAd,CAAuBC,MAAO,CAAE1D,QAAOwD,aACrC,kBAAC,IAAD,CAAgBV,OAAQA,GACtB,kBAAC,IAAD,CAAea,QAASrF,GACtB,kBAAC,IAAD,CAAQnB,MAAO,CAAEE,OAAQ,SACvB,kBAACmB,EAAD,CAASJ,MAAM,OAAOK,MAAOA,IAE7B,kBAAC,IAAD,KACE,kBAAC,IAAOmF,OAAR,CACEzG,MAAO,CAELO,gBAAiB,QACjBmD,QAAS,IAGX,kBAAC,IAAD,CACEgD,QAAQ,gBACRC,MAAM,SACN3G,MAAO,CAAEC,MAAO,SAEhB,kBAAC,IAAD,CAAK2G,KAAM,GAAI5G,MAAO,CAAEQ,UAAW,SACjC,yBACER,MAAO,CACLG,QAAS,OACT0G,WAAY,WACZC,YAAa,GACbC,WAAY,IAiBd,kBAAC,IAAD,CACE7F,MAAO,GAGN2B,KAIP,kBAAC,IAAD,CAAK+D,KAAM,EAAG5G,MAAO,CAAEQ,UAAW,WAChC,kBAAC,IAAD,CACE2C,KAAM,kBAAC6D,EAAA,EAAD,MACNhH,MAAO,CAAEiH,WAAY,aAK7B,kBAACzD,EAAD,YClEM0D,QACW,cAA7BvG,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASsG,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAM1D,c","file":"static/js/main.2ae81197.chunk.js","sourcesContent":["import React from 'react'\nimport { Avatar, Card, Typography } from 'antd'\nimport Title from 'antd/lib/typography/Title'\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport _ from 'lodash'\n\nexport default function Profile() {\n    const { data } = useQuery(gql`\n    query getMe{\n      me {\n        first_name,\n        last_name,\n    profile {\n      photo\n      job\n    }\n  }\n    }\n  `)\n    return (\n        <div style={{width:\"100%\",height:200,display:\"flex\",justifyContent:\"center\",flexDirection:\"row\"}}>\n        <Card bordered={false}  style={{backgroundColor:\"transparent\",textAlign:\"center\"}}>\n            <Avatar  size=\"large\"  src={`http://${window.location.hostname}:8000/${_.get(data, 'me.profile.photo', '')}`} />\n            <br/>\n            <Typography  type=\"danger\" style={{color:\"white\",textAlign:\"center\"}} level={4} >Milia Khaled</Typography>\n        </Card>\n      </div>\n    )\n}\n","import { createBrowserHistory } from \"history\";\n\nexport const browserHistory = createBrowserHistory();\nexport const serverUrl = \"http://localhost:8000\";\n","import React, { useState } from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { LinkType } from \"../../links\";\nimport { Link } from \"react-router-dom\";\nimport Profile from \"./Profile\";\nimport _ from \"lodash\";\nimport { browserHistory } from \"../../config\";\n\ninterface SidebarProps {\n  color?: \"dark\" | \"light\" | undefined;\n  links: LinkType[];\n}\n\nexport default function Sidebar({ color = \"dark\", links }: SidebarProps) {\n  const [collapse, setCollapse] = useState(false);\n  return (\n    <Layout.Sider\n      collapsible\n      breakpoint=\"md\"\n      width=\"250\"\n      style={{ paddingTop: 64 }}\n      collapsed={collapse}\n      onCollapse={(e) => setCollapse(!collapse)}\n    >\n      <Profile />\n      <Menu\n        theme={color}\n        mode=\"inline\"\n        defaultSelectedKeys={[browserHistory.location.pathname]}\n        defaultOpenKeys={links\n          .filter((l) =>\n            l.type === \"multiple\"\n              ? l.pages.findIndex(\n                  (p) => p.href === browserHistory.location.pathname\n                ) !== -1\n              : false\n          )\n          .map((p) => p.title)}\n      >\n        {links.map((link, index) => {\n          if (link.type === \"signle\") {\n            return (\n              <Menu.Item key={link.href} className=\"customclass\">\n                <>\n                  {link.icon}\n                  <span> {link.title}</span>\n                  <Link to={link.href} />\n                </>\n              </Menu.Item>\n            );\n          } else {\n            return (\n              <Menu.SubMenu\n                key={link.title}\n                title={\n                  <span>\n                    {link.icon}\n                    {/* <Icon type={link.icon} /> */}\n                    <span>{link.title}</span>\n                  </span>\n                }\n              >\n                {link.pages.map((p, index2) => (\n                  <Menu.Item key={p.href}>\n                    <strong> {p.title}</strong>\n                    <Link to={p.href} />\n                  </Menu.Item>\n                ))}\n              </Menu.SubMenu>\n            );\n          }\n        })}\n      </Menu>\n    </Layout.Sider>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ninterface RouteProps {\n  path: string;\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n}\n\nexport const routes: RouteProps[] = [];\n","import React from \"react\";\nimport { routes } from \"../../routes\";\nimport { Layout } from \"antd\";\nimport { Switch, Route } from \"react-router-dom\";\n\nexport default function Content() {\n  return (\n    <Layout.Content\n      style={{\n        margin: \"24px 16px\",\n        padding: 24,\n        background: \"\",\n        minHeight: 280,\n      }}\n    >\n      <Switch>\n        {routes.map((r) => (\n          <Route path={r.path} component={r.component} exact></Route>\n        ))}\n      </Switch>\n    </Layout.Content>\n  );\n}\n","import { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ApolloLink } from \"apollo-boost\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport ApolloClient from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\nimport { ServerError, ServerParseError } from \"apollo-link-http-common\";\n\nexport const errorLink = onError(\n  ({ graphQLErrors, networkError, response }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path, nodes }) => {\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n        );\n        console.log(locations);\n      });\n    if (networkError) console.log(networkError);\n    if (\n      networkError &&\n      (networkError as ServerError).result &&\n      (networkError as ServerError).result.map\n    )\n      (networkError as ServerError).result.map((e: any) => console.log(e));\n\n    if (networkError && (networkError as ServerError).statusCode === 401) {\n      // remove cached token on 401 from the server\n      // window.location.replace('/login');\n    }\n  }\n);\n// Creating the link to the graphql server\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: \"no-cache\",\n    errorPolicy: \"ignore\",\n  },\n\n  query: {\n    fetchPolicy: \"no-cache\",\n    errorPolicy: \"all\",\n  },\n};\nconst authLink: ApolloLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"token\");\n  // if (!token) console.log('ldùsmdlùsdlm');\n\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `JWT ${token}` : \"\",\n    },\n  };\n});\nconst authMiddleware: ApolloLink = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const token = localStorage.getItem(\"token\");\n  if (token == null) window.location.replace(\"/\");\n  operation.setContext({\n    headers: {\n      authorization: token ? `JWT ${token}` : \"\",\n    },\n  });\n\n  return forward(operation);\n});\nconst link: BatchHttpLink = new BatchHttpLink({\n  uri: `http://${window.location.hostname}:8000/gql`,\n  credentials: \"same-origin\",\n});\n// const resetToken = onError(({ response, networkError }) => {\n//   if (networkError && networkError.statusCode === 401) {\n//     // remove cached token on 401 from the server\n//     localStorage.clear();\n//   }\n// });\n// Creating the client\nexport const client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache: new InMemoryCache({\n    addTypename: false,\n  }),\n\n  link: ApolloLink.from([errorLink, authLink, link]), // authLink,\n  //defaultOptions,\n});\n","// import Location from \"./icons/deal.png\";\nimport React from \"react\";\n\nimport {\n  PieChartFilled as Dashboard,\n  FolderAddFilled as Location,\n} from \"@ant-design/icons\";\n\ninterface LinkTypeBase {\n  title: string;\n  href: string;\n  icon?: any;\n}\nexport interface SingleLinkType extends LinkTypeBase {\n  type: \"signle\";\n}\nexport interface MultipleLinkType extends Omit<LinkTypeBase, \"href\"> {\n  type: \"multiple\";\n  pages: LinkTypeBase[];\n}\n\nexport type LinkType = MultipleLinkType | SingleLinkType;\n\nexport const links: LinkType[] = [\n  {\n    title: \"Dashboard\",\n    href: \"/dashboard\",\n    type: \"signle\",\n    icon: <Dashboard />,\n  },\n  {\n    title: \"Menu\",\n    type: \"multiple\",\n    icon: <Location />,\n    pages: [\n      {\n        title: \"Sous Menu 1\",\n        href: \"menu1-1\",\n      },\n      {\n        title: \"Sous Menu 2\",\n        href: \"menu1-2\",\n      },\n    ],\n  },\n];\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Layout, Button, Row, Col } from \"antd\";\nimport Sidebar from \"./layouts/sidebar/sidebar\";\nimport Content from \"./layouts/content\";\nimport { Router as BrowserRouter } from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { client } from \"./graphql\";\nimport Title from \"antd/lib/typography/Title\";\nimport { createBrowserHistory } from \"history\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { browserHistory } from \"./config\";\nimport { links } from \"./links\";\n\nexport const TitleContext = React.createContext({});\n\nfunction App() {\n  const [title, setValue] = useState(\"SGME\");\n  return (\n    <TitleContext.Provider value={{ title, setValue }}>\n      <ApolloProvider client={client}>\n        <BrowserRouter history={browserHistory}>\n          <Layout style={{ height: \"100%\" }}>\n            <Sidebar color=\"dark\" links={links}></Sidebar>\n\n            <Layout>\n              <Layout.Header\n                style={{\n                  // boxShadow: \"1px 1px 2px 1px gray\",\n                  backgroundColor: \"white\",\n                  padding: 0,\n                }}\n              >\n                <Row\n                  justify=\"space-between\"\n                  align=\"middle\"\n                  style={{ width: \"100%\" }}\n                >\n                  <Col span={20} style={{ textAlign: \"left\" }}>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"baseline\",\n                        paddingLeft: 50,\n                        lineHeight: 0,\n                      }}\n                    >\n                      {/* <Button\n                        shape=\"circle\"\n                        style={{\n                          border: \"none\",\n                          marginRight: 10,\n                          marginLeft: 6\n                        }}\n                        onClick={() => {\n                          browserHistory.goBack();\n                        }}\n                      >\n                        <MenuIcon />\n                      </Button> */}\n\n                      <Title\n                        level={3}\n                        //style={{ fontFamily: \"Arial\", lineHeight: 0 }}\n                      >\n                        {title}\n                      </Title>\n                    </div>\n                  </Col>\n                  <Col span={1} style={{ textAlign: \"center\" }}>\n                    <Button\n                      icon={<UserOutlined />}\n                      style={{ marginLeft: \"auto\" }}\n                    />\n                  </Col>\n                </Row>\n              </Layout.Header>\n              <Content />\n            </Layout>\n          </Layout>\n        </BrowserRouter>\n      </ApolloProvider>\n    </TitleContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}